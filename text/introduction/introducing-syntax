//TODO: go through your formulae and make sure you have properly detailed how they treat whitespace and separators

In this guide we will concieve of a C program as being a sequence of TRANSLATION UNITs. TRANSLATION UNITs are not exactly the same as source files, since source files are transformed into TRANSLATION UNITs by the preprocessor. In this book, we will mostly think in terms of TRANSLATION UNITs rather than source files, except when explaining some action of the preprocessor.

TRANSLATION UNITs are themselves sequences of EXTERNAL DECLARATIONs

An EXTERNAL DECLARATION may be either a FUNCTION DEFINITION or a DECLARATION

A FUNCTION DEFINITION is either:
	A (possibly empty) sequence of DECLARATION SPECIFIERs (with certain extra constraints) followed by a DECLARATOR (N.b. this kind of FUNCTION DEFINITION has the same structure as a DECLARATION, except that its INIT DECLARATOR may not contain an INITIALISER)
	A (possibly empty) sequence of DECLARATIONs followed by a COMPOUND STATEMENT (N.b. the declarations here may not contain initialisations)

A DECLARATION is a (non-empty) sequence of DECLARATION SPECIFIERs followed by a (possibly empty) list of INIT DECLARATORs

A DECLARATION SPECIFIER is one of the following:
	"typedef"
	"auto"/"register"/"static"/"extern"
	TYPE SPECIFIER
	"const"/"volatile"

A TYPE SPECIFIER is one of the following:
	"void"
	"char"/"short"/"int"/"long"/"float"/"double"/"signed"/"unsigned"
	STRUCT OR UNION SPECIFIER
	ENUM SPECIFIER
	TYPEDEF NAME

An INIT DECLARATOR is either:
	A DECLARATOR
	A DECLARATOR, followed by "=", followed by an INITIALISER

DECLARATORs are composed as follows:
	The simplest DECLARATOR is a lone IDENTIFIER
	More complex DECLARATORs may be built up by the following operations:
		enclosing in parentheses
		prepending by '*' and a (possibly empty) sequence of TYPE SPECIFIERS
		(operations valid only for operators whose first character is not '*'):
			appending with '[', followed by an optional CONSTANT EXPRESSION, followed by ']'
			appending with '(', followed by an optional sequence of IDENTIFIERS, followed by ')' (N.b. this is old-style function syntax and is deprecated)
			appending with '(', followed by a sequence of PARAMETER DECLARATIONs separated by commas and optionally terminated with ", ...", followed by ')'

An IDENTIFIER is a NONDIGIT followed by a sequence of DIGITs and NONDIGITs

A NONDIGIT is one of the following characters:
	_ a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

A DIGIT is one of the following characters:
	0 1 2 3 4 5 6 7 8 9

A PARAMETER DECLARATION is a (non-empty) sequence of DECLARATION SPECIFIERS followed by either:
	A single DECLARATOR
	An optional ABSTRACT DECLARATOR

A COMPOUND STATEMENT is '{', followed by a (possibly empty) sequence of DECLARATIONs, followed by a (possibly empty) sequence of STATEMENTs, followed by '}'

A STATEMENT is any of the following:
	LABELED STATEMENT
	COMPOUND STATEMENT
	EXPRESSION STATEMENT
	SELECTION STATEMENT
	ITERATION STATEMENT
	JUMP STATEMENT

An EXPRESSION STATEMENT is an optional EXPRESSION followed by ';'

EXPRESSIONs are composed as follows:
	PRIMARY EXPRESSIONs are:
		IDENTIFIERs, CONSTANTs or STRINGs
		'(' followed by an EXPRESSION followed by ')'

	POSTFIX EXPRESSIONs are any of the above defined EXPRESSIONs and:
		A POSTFIX EXPRESSION followed by '[' followed by an EXPRESSION followed by ']'
		A POSTFIX EXPRESSION followed by '(' followed by an optional ARGUMENT EXPRESSION LIST followed by ')'
		A POSTFIX EXPRESSION followed by '.' followed by an IDENTIFIER
		A POSTFIX EXPRESSION followed by "->" followed by an IDENTIFIER
		A POSTFIX EXPRESSION followed by "++"
		A POSTFIX EXPRESSION followed by "--"

	UNARY EXPRESSIONs are any of the above defined EXPRESSIONs and:
		"++" followed by a UNARY EXPRESSION
		"--" followed by a UNARY EXPRESSION
		A UNARY OPERATOR followed by a CAST EXPRESSION
		"sizeof" followed by a UNARY EXPRESSION
		"sizeof" followed by '(' followed by a TYPE NAME followed by ')'

	CAST EXPRESSIONs are any of the above defined EXPRESSIONs and:
		'(' followed by TYPE NAME followed by ')' followed by CAST EXPRESSION

	MULTIPLICATIVE EXPRESSIONs are any of the above defined EXPRESSIONs and:
		A MULTIPLICATIVE EXPRESSION followed by '*' followed by a CAST EXPRESSION
		A MULTIPLICATIVE EXPRESSION followed by '/' followed by a CAST EXPRESSION
		A MULTIPLICATIVE EXPRESSION followed by '%' followed by a CAST EXPRESSION

	ADDITIVE EXPRESSIONs are any of the above defined EXPRESSIONs and:
		An ADDITIVE EXPRESSION followed by '+' followed by a MULTIPLICATIVE EXPRESSION
		An ADDITIVE EXPRESSION followed by '-' followed by a MULTIPLICATIVE EXPRESSION

	SHIFT EXPRESSIONs are any of the above defined EXPRESSIONs and:
		A SHIFT EXPRESSION followed by "<<" followed by an ADDITIVE EXPRESSION
		A SHIFT EXPRESSION followed by ">>" followed by an ADDITIVE EXPRESSION

	RELATIONAL EXPRESSIONs are any of the above defined EXPRESSIONs and:
		A RELATIONAL EXPRESSION followed by '<' followed by a SHIFT EXPRESSION
		A RELATIONAL EXPRESSION followed by '>' followed by a SHIFT EXPRESSION
		A RELATIONAL EXPRESSION followed by "<=" followed by a SHIFT EXPRESSION
		A RELATIONAL EXPRESSION followed by ">=" followed by a SHIFT EXPRESSION

	EQUALITY EXPRESSIONs are any of the above defined EXPRESSIONs and:
		An EQUALITY EXPRESSION followed by "==" followed by a RELATIONAL EXPRESSION
		An EQUALITY EXPRESSION followed by "!=" followed by a RELATIONAL EXPRESSION

	AND EXPRESSIONs are any of the above expressions or an AND EXPRESSION followed by '&' followed by an EQUALITY EXPRESSION

	EXCLUSIVE OR EXPRESSIONs are any of the above expressions or an EXCLUSIVE OR EXPRESSION followed by '^' followed by an AND EXPRESSION

	INCLUSIVE OR EXPRESSIONs are any of the above expressions or an INCLUSIVE OR EXPRESSION followed by '|' followed by an EXCLUSIVE OR EXPRESSION

	LOGICAL AND EXPRESSIONs are any of the above expressions or a LOGICAL AND EXPRESSION followed "&&" followed by an INCLUSIVE OR EXPRESSION

	LOGICAL OR EXPRESSIONs are any of the above expressions or a LOGICAL OR EXPRESSION followed by "||" followed by a LOGICAL AND EXPRESSION

	CONDITIONAL EXPRESSIONs are any of the above expressions or a LOGICAL OR EXPRESSION followed by '?' followed by an EXPRESSION followed by ':' followed by a CONDITIONAL EXPRESSION

	ASSIGNMENT EXPRESSIONs are any of the above expressions or a UNARY EXPRESSION followed by an ASSIGNMENT OPERATOR followed by an ASSIGNMENT EXPRESSION

	In addition to all the above, EXPRESSIONs may be formed as an EXPRESSION followed by ',' followed by an ASSIGNMENT EXPRESSION

An ARGUMENT EXPRESSION LIST is a sequence of ASSIGNMENT EXPRESSIONs separated by commas

A STRING is an optional 'L' followed by '"' followed by an optional sequence of S CHARs followed by '"'
An S CHAR is either:
	An ESCAPE SEQUENCE
	Any member of the source character set except '"', '\' or a newline character

An ESCAPE SEQUENCE is one of:
	\' \" \? \\ \a \b \f \n \r \t \v
	'\' followed by between one and three OCTAL DIGITs
	"\x" followed by a sequence of HEXADECIMAL DIGITs

An OCTAL DIGIT is one of:
	0 1 2 3 4 5 6 7

A HEXADECIMAL DIGIT is one of:
	0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F


Structure of simple-program.c:
simple-program.c:
	TRANSLATION UNIT

simple-program.c:3-6:
	FUNCTION DEFINITION
	=	DECLARATION
		COMPOUND STATEMENT

simple-program.c:3:	void main(void)
	void main(void)
	= DECLARATION
	= <DECLARATION SPECIFIER>	<INIT DECLARATOR>
	= <TYPE SPECIFIER>		<DECLARATOR>
	= void				<IDENTIFIER>(<PARAMETER DECLARATIONs>)

simple-program.c:3:	... main(void)
	main(void)
	= <IDENTIFIER>(<PARAMETER DECLARATIONs>)
	= main	      (<PARAMETER DECLARATION>)

simple-program.c:3:	...(void)
	void
	= PARAMETER DECLARATION
	= <DECLARATION SPECIFIERs>
	= <DECLARATION SPECIFIER>
	= <TYPE SPECIFIER>
	= void

simple-program.c:4-6:
	COMPOUND STATEMENT
	= {
		STATEMENT
	  }

simple-program.c:5:	printf("Hello, world!\n");
	STATEMENT
	= EXPRESSION STATEMENT
	= <EXPRESSION>;
	= <POSTFIX EXPRESSION>;
	= <POSTFIX EXPRESSION>(<ARGUMENT EXPRESSION LIST>);
	= <IDENTIFIER>(<ASSIGNMENT EXPRESSION>);
	= printf(<PRIMARY EXPRESSION>);

simple-program.c:5: ..."Hello, world!\n"...
	PRIMARY EXPRESSION
	= STRING
	= "Hello, world!\n"


Bibliography:
https://port70.net/%7Ensz/c/c89/c89-draft.html
https://en.cppreference.com/w/c/language.html
K&R2e:Section A13
