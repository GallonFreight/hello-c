In this guide we will concieve of a C program as being a sequence of TRANSLATION UNITs. TRANSLATION UNITs are not exactly the same as source files, since source files are transformed into TRANSLATION UNITs by the preprocessor. In this book, we will mostly think in terms of TRANSLATION UNITs rather than source files, except when explaining some action of the preprocessor.

TRANSLATION UNITs are themselves sequences of EXTERNAL DECLARATIONs

An EXTERNAL DECLARATION may be either a FUNCTION DEFINITION or a DECLARATION

A FUNCTION DEFINITION is either:
	A (possibly empty) sequence of DECLARATION SPECIFIERs (with certain extra constraints) followed by a DECLARATOR
	A (possibly empty) sequence of DECLARATIONs followed by a COMPOUND STATEMENT (N.b. the declarations here may not contain initialisations)

A DECLARATION is a (non-empty) sequence of DECLARATION SPECIFIERs followed by a (possibly empty) list of INIT DECLARATOR

A DECLARATION SPECIFIER is one of the following:
	"typedef"
	"auto"/"register"/"static"/"extern"
	TYPE SPECIFIER
	"const"/"volatile"

A TYPE SPECIFIER is one of the following:
	"void"
	"char"/"short"/"int"/"long"/"float"/"double"/"signed"/"unsigned"
	STRUCT OR UNION SPECIFIER
	ENUM SPECIFIER
	TYPEDEF NAME

An INIT DECLARATOR is either:
	A DECLARATOR
	A DECLARATOR, followed by "=", followed by an INITIALISER

DECLARATORs are composed as follows:
	The simplest DECLARATOR is a lone IDENTIFIER
	More complex DECLARATORs may be built up by the following operations:
		enclosing in parentheses
		prepending by '*' and a (possibly empty) sequence of TYPE SPECIFIERS
		(operations valid only for operators whose first character is not '*'):
			appending with '[', followed by an optional CONSTANT EXPRESSION, followed by ']'
			appending with '(', followed by an optional sequence of IDENTIFIERS, followed by ')' (N.b. this is old-style function syntax and is deprecated)
			appending with '(', followed by a sequence of PARAMETER DECLARATIONs separated by commas and optionally terminated with ", ...", followed by ')'

A PARAMETER DECLARATION is a (non-empty) sequence of DECLARATION SPECIFIERS followed by either:
	A single DECLARATOR
	An optional ABSTRACT DECLARATOR


Structure of simple-program.c:
simple-program.c:
	TRANSLATION UNIT

simple-program.c:3-6:
	FUNCTION DEFINITION
	=	DECLARATION
		COMPOUND STATEMENT

simple-program.c:3:	void main(void)

	void main(void)
	= DECLARATION
	= <DECLARATION SPECIFIER>	<INIT DECLARATOR>
	= <TYPE SPECIFIER>		<DECLARATOR>
	= void				<IDENTIFIER>(<PARAMETER DECLARATIONs>)

simple-program.c:3:	... main(void)

	main(void)
	= <IDENTIFIER>(<PARAMETER DECLARATIONs>)
	= main	      (<PARAMETER DECLARATION>)

simple-program.c:3:	...(void)

	void
	= PARAMETER DECLARATION
	= <DECLARATION SPECIFIERs>
	= <DECLARATION SPECIFIER>
	= <TYPE SPECIFIER>
	= void


Bibliography:
https://port70.net/%7Ensz/c/c89/c89-draft.html
https://en.cppreference.com/w/c/language.html
